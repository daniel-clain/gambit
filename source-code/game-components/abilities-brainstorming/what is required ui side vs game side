* ui side and game side is another way of saying client side vs server side. the two need to be separated because the client needs ability related info for ability display and validation. the server side is needed for validation, storage and processing

= client side
* when an employee is selected the employee card shows actions blocks at the bottom, 1 action block for each of the employees possible abilities. the action can be selected which will display that action in an action card
* the action card will show more information about that ability. the confirm button will be disabled if there is no target, or if there is no source, or if the cost is not met, or if the requirements are not met
* when a fighter card is selected the fighter card shows action blocks at the bottom, 1 ation block for each of the abilites that fighter can be a target of. the ability block has an invalid marker if the ability requirements are unable to be satisfied. ie no soure, cant affor cost, cant meet requirements

= what data is needed for client side
*cost, requirements, valid source, valid target, short description, detailed info, skill level weighting effect, when it is resolved


= server side
* when client side sends action to server side, if action is 'ability selected' then the ability goes to the ability processor class
* the ability process is responsible for doing sererside validation, and to execute the ability at the appropriate time
* the reason the ability needs to be validated on the server side and the client side is:
  - on the client side the user needs to know ahead of time if they can or cant do something
  - the client side can be tampered with, there needs to be a 2nd line of defence server side

= difference between each
* client side cant reference full fighter objects because of their dept and complexity, so it has to reference a fighter representation object that only has the data necessary to fulfil the requirements of the client side
* like the full fighter class, the manager and employee class are tied to the game object on the server side, therefore a representation of these needs to be provided to the client side
* client side doesnt need to know anything about the functioning about when the ability is exectuted. only needs to display to the user when the ability is executed
* server side does not need to know about text info/description