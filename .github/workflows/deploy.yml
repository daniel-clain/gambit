name: Deploy Frontend and Backend to Vultr

on:
  push:
    branches:
      - fight-update-rework # or the branch you want to deploy from (e.g., 'master', 'release')

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20.11.1"

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add server to known_hosts
        run: ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts

      - name: Install dependencies
        run: |
          yarn install --frozen-lockfile

      - name: Build frontend
        run: |
          yarn build-prod

      - name: Build backend
        run: |
          yarn build-prod-server

      # Step to transfer package.json and yarn.lock to the server
      - name: Transfer package.json and yarn.lock to server
        run: |
          scp package.json yarn.lock ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:${{ secrets.SERVER_APP_DIR }}

      # Step to transfer frontend build to server
      - name: Transfer frontend build to server
        run: |
          scp -r host-packages/main-game-prod/* ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:${{ secrets.SERVER_APP_DIR }}/host-packages/main-game-prod/

      # Step to transfer backend build to server
      - name: Transfer backend build to server
        run: |
          scp -r server-build-prod/* ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:${{ secrets.SERVER_APP_DIR }}/server-build-prod

      # SSH into the server, install dependencies, and deploy
      - name: SSH into the server and deploy
        uses: appleboy/ssh-action@v0.1.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_PRIVATE_KEY }}
          port: 22
          script: |
            # Ensure NVM is loaded and Node.js version is correct
            export NVM_DIR=\$HOME/.nvm;
            [ -s \$NVM_DIR/nvm.sh ] && . \$NVM_DIR/nvm.sh;

            # Use the correct Node.js version
            nvm use 20.11.1;

            # Navigate to the app directory
            cd ${{ secrets.SERVER_APP_DIR }}

            # Install production dependencies
            yarn install --frozen-lockfile --production

            pm2 startOrReload ecosystem.config.js --env production
            pm2 save;
